# -*- mode: Python -*-

def flux_bootstrap(owner, name, git_token=None):
    """Bootstrap Flux for the specified repo owner/name

    Args:
        owner: The owner of the repo
        name: The name of the repo
        git_token (optional): Use this token for GitHub operations. If None it will
            use the value from the GITHIB_TOKEN environment variable. 
    
    """
    if not owner:
        fail("you must supply a repo owner in the tilt-settings")
    if not git_token:
        git_token = os.getenv("GITHUB_TOKEN", "")
    if git_token == "":
        fail("you must supply a GitHub token via the GITHUB_TOKEN environment variable or by parameter")

    cmd = "flux bootstrap --components=kustomize-controller,source-controller github --private=false --owner {repo_owner} --repository {repo_name} --personal --path=./upstream".format(
        repo_owner = owner,
        repo_name = name,
    )
    local(cmd, env = {"GITHUB_TOKEN": git_token})

def dir_create(path):
    """Create a directory

    Args:
        path: The path of the directory to create
    
    """
    local("mkdir -p {}".format(path),echo_off=True,quiet=True)

def file_write(path, contents):
    """Write contents to a file

    Args:
        path: The path of the file to write the contents to
        contents: The contents of the file
    
    """
    local('echo "$CONTENTS" > {}'.format(path),
        env={'CONTENTS': str(contents)},
        echo_off=True,
        quiet=True)

def info(message):
    """Log an information message

    Args:
        message: The message to log
    
    """
    print("INFO: {}".format(message))

def warn(message):
    """Log a warning message

    Args:
        message: The message to log
    
    """
    print("WARN: {}".format(message))