# -*- mode: Python -*-

load("../k8s/Tiltfile", "k8s_find_object_name")
load("../io/Tiltfile", "info", "file_write")

def project_enable(name, project, debug=None):
    """Enable a project in Tilt

    Args:
        name: Is the name of the project.
        project: Is the configuration of the project to enable. See notes below on format.
        debug (optional): Is the debug configuration for the project. See note below on format.

    Notes:
        The project passed in is expected to be in this format:
            {
                "context": ".",
                "image": "richardcase/tenant-controller",
                "live_reload_deps": [
                    "main.go",
                    "go.mod",
                    "go.sum",
                    "api",
                    "controllers"
                ],
                "kustomize_dir": "config/default",
                "label": "Tenant",
            },
        The optional debug section is expected to be in this format:
            {
                "continue": true,
                "port": 30000
            },
    """
    if not name:
        fail("you must supply the project name")
    if not project:
        fail("you must supply a project configuration")
    # TODO: check the format
    print(project)

    os_name = str(local("go env GOOS")).rstrip("\n")
    os_arch = str(local("go env GOARCH")).rstrip("\n")

    context = project.get("context")
    go_main = project.get("go_main", "main.go")
    label = project.get("label", name)
    debug_port = int(debug.get("port", 0))

    live_reload_deps = []
    for d in project.get("live_reload_deps", []):
        live_reload_deps.append(context + "/" + d)

    race_detector_enabled = debug.get("race_detector", False)
    if race_detector_enabled:
        if os_name != "linux" or os_arch != "amd64":
            fail("race_detector is only supported on Linux x86-64")
        cgo_enabled = "1"
        build_options = "-race"
        ldflags = "-linkmode external -extldflags \"-static\""
    else:
        cgo_enabled = "0"
        build_options = ""
        ldflags = "-extldflags \"-static\""

    if debug_port != 0:
        # disable optimisations and include line numbers when debugging
        gcflags = "all=-N -l"
    else:
        gcflags = ""

    build_env = "CGO_ENABLED={cgo_enabled} GOOS=linux GOARCH={arch}".format(
        cgo_enabled = cgo_enabled,
        arch = os_arch,
    )
    build_cmd = "{build_env} go build {build_options} -gcflags '{gcflags}' -ldflags '{ldflags}' -o .tiltbuild/bin/manager {go_main}".format(
        build_env = build_env,
        build_options = build_options,
        gcflags = gcflags,
        go_main = go_main,
        ldflags = ldflags,
    )
    info("built binary")

    local_resource(
        label.lower() + "_binary",
        cmd = "cd {context};mkdir -p .tiltbuild/bin;{build_cmd}".format(
            context = context,
            build_cmd = build_cmd,
        ),
        deps = live_reload_deps,
        labels = [label, "ALL.binaries"],
    )

    additional_docker_helper_commands = project.get("additional_docker_helper_commands", "")
    additional_docker_build_commands = project.get("additional_docker_build_commands", "")

    dockerfile_contents = "\n".join([
        tilt_helper_dockerfile_header,
        additional_docker_helper_commands,
        tilt_dockerfile_header,
        additional_docker_build_commands,
    ])

    port_forwards = []
    links = []

    if debug_port != 0:
        info("port forwarding debug port")
        port_forwards.append(port_forward(debug_port, 30000))

    info("doing docker build")
    docker_build_ctx = context + "/.tiltbuild/bin/"
    print(docker_build_ctx)
    docker_build(
        ref = project.get("image"),
        context = context + "/.tiltbuild/bin/",
        dockerfile_contents = dockerfile_contents,
        target = "tilt",
        only = "manager",
        live_update = [
            sync(context + "/.tiltbuild/bin/manager", "/manager"),
            run("sh /restart.sh"),
        ],
    )
    info("done docker build")

    kustomize_dir = project.get("kustomize_dir", "")
    if kustomize_dir != "":
        info("doing kustomization")
        yaml = kustomize(context + '/' + kustomize_dir)
        yaml = update_manager(yaml, debug)
        yaml_path = context + "/.tiltbuild/manifest.yaml"
        file_write(yaml_path, yaml)
        k8s_yaml(yaml)

        objs = decode_yaml_stream(yaml)
        k8s_resource(
            workload = k8s_find_object_name(objs, "Deployment"),
            #objects = [find_object_qualified_name(objs, "Provider")],
            new_name = label.lower() + "_controller",
            labels = [label, "ALL.controllers"],
            port_forwards = port_forwards,
            links = links,
            #resource_deps = ["provider_crd"],
        )
    info("finished adding project")

def update_manager(yaml, debug):
    """Enable a project in Tilt

    *****TODO: change this so the deployment is passed in

    Args:
        yaml: the controller yaml.
        debug: Is the debug configuration for the project. See note below on format.

    Notes:
        The debug section is expected to be in this format:
            {
                "continue": true,
                "port": 30000
            },
    """
    debug_port = int(debug.get("port", 0))
    objs = decode_yaml_stream(yaml)
    for o in objs:
        if o["kind"] == "Deployment":
            containers = o["spec"]["template"]["spec"]["containers"]
            for c in containers:
                if c["name"] != "manager":
                    continue

                cmd = ["sh", "/start.sh", "/manager"]
                if debug != {}:
                    cmd = ["sh", "/start.sh", "/dlv", "--accept-multiclient", "--api-version=2", "--headless=true", "exec"]
                    if debug_port != 0:
                        # The debug port
                        ports = c.get("ports")
                        if ports  == None:
                            info("no ports, creating new")
                            c["ports"] = []
                        ports = c["ports"]
                        #ports.append({"containerPort": debug_port})
                        ports.append({"containerPort": 30000})
                        cmd.append("--listen=:30000")
                        #TODO: handle the continue false
                        cmd.append("--continue")
                        cmd.append("--")
                        cmd.append("/manager")

                        debugArgs = []
                        for arg in c["args"]:
                            if arg == "--leader-elect" or arg == "--leader-elect=true":
                                continue
                            debugArgs.append(arg)
                        c["command"] = cmd
                        if len(debugArgs) == 0:
                            c.pop("args")
                        else:
                            c["args"] = debugArgs
                        c.pop("readinessProbe")
                        c.pop("livenessProbe")
    # Save the changes
    yaml = encode_yaml_stream(objs)
    return yaml

tilt_helper_dockerfile_header = """
# Tilt image
FROM golang:1.17.3 as tilt-helper
# Support live reloading with Tilt
RUN go get github.com/go-delve/delve/cmd/dlv
RUN wget --output-document /restart.sh --quiet https://raw.githubusercontent.com/windmilleng/rerun-process-wrapper/master/restart.sh  && \
    wget --output-document /start.sh --quiet https://raw.githubusercontent.com/windmilleng/rerun-process-wrapper/master/start.sh && \
    chmod +x /start.sh && chmod +x /restart.sh && chmod +x /go/bin/dlv
"""

tilt_dockerfile_header = """
FROM gcr.io/distroless/base:debug as tilt
WORKDIR /
COPY --from=tilt-helper /start.sh .
COPY --from=tilt-helper /restart.sh .
COPY --from=tilt-helper /go/bin/dlv .
COPY manager .
"""